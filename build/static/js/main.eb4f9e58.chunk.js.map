{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["SKILLS","LEVELS","getMailto","email","name","results","concat","getResponseSubject","serializeResults","getResponseBody","JSON","stringify","App","_ref","period","responseEmail","primaryColor","randomColor","secondaryColor","luminosity","_useState","useState","_useState2","Object","slicedToArray","isShowResults","showResults","_useState3","map","Math","round","random","length","_useState4","currentLevels","setLevel","_useState5","_useState6","currentSkills","setSkills","_useState7","positive","text","negative","_useState8","answers","setAnswers","skills","reduce","result","skill","key","objectSpread","defineProperty","console","log","react_default","a","createElement","className","href","style","background","skillKey","Fragment","type","value","placeholder","readOnly","onChange","event","target","currentTarget","iterSkill","iterSkillKey","maxlength","reduceRight","level","levelKey","id","checked","iterLevelKey","htmlFor","title","onClick","select","Boolean","window","location","hostname","match","getUrlParams","search","slice","split","param","_param$split","_param$split2","assign","decodeURIComponent","replace","params","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eb4f9e58.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nimport randomColor from 'randomcolor';\n\nimport './App.css';\n\nconst SKILLS = [\n    'В коммуникациях',\n    'В анализе и планировании задач',\n    'В качестве кода и код-ревью',\n    'При исполнении взятых обязательств',\n    'В саморазвитии',\n    '',\n];\nconst LEVELS = [\n    'Не могу оценить',\n    'Безынициативно, но делает',\n    'Так, как все коллеги вокруг',\n    'Хорошо и берет на себя ответственность',\n    'Помогает и другим вне своей ответственности',\n    'Крутотеньски, быть лучше не может',\n];\n\nconst App = ({ name, period, responseEmail }) => {\n    const primaryColor = randomColor();\n    const secondaryColor = randomColor({luminosity: 'bright'});\n\n    const [isShowResults, showResults] = useState(false);\n\n    const [currentLevels, setLevel] = useState(LEVELS.map(() => Math.round(Math.random() * (LEVELS.length - 1))));\n    const [currentSkills, setSkills] = useState([...SKILLS]);\n    const [answers, setAnswers] = useState({\n        positive: { text: '' },\n        negative: { text: '' },\n    });\n\n    const results = {\n        name,\n        period,\n        primaryColor,\n        secondaryColor,\n        skills: currentSkills.reduce((result, skill, key) => {\n            return {\n                ...result,\n                [skill]: currentLevels[key],\n            };\n        }, {}),\n        answers,\n    };\n    console.log(results);\n\n    return (\n        <div className=\"wrapper\">\n            <h1>{name}</h1>\n            <p>Как себя проявил, на ваш взгляд, за последние {period} месяца/ев:</p>\n            <p><em>Что такое <a href=\"https://fff.works/octopus/\">осьминожка навыков</a>, двигайте ноги - ставьте баллы</em></p>\n\n            <div className=\"octo\">\n                <div\n                    className=\"octo-body\"\n                    style={{ background: primaryColor }}\n                >\n                    <div className=\"octo-body__skirt\" style={{\n                        background: `linear-gradient(to right, ${secondaryColor} 0%, ${primaryColor} 85%)`\n                    }} />\n                </div>\n\n                {currentSkills.map((skill, skillKey) => (\n                    <>\n                        <input\n                            className={`skills ${skillKey !== currentSkills.length - 1 ? 'skills_disabled' : ''}`}\n                            type=\"text\"\n                            name={`skill${skillKey}`}\n                            value={skill || ''}\n                            placeholder={'Впишите свое...'}\n                            readOnly={skillKey !== currentSkills.length - 1}\n                            onChange={event => {\n                                const target = event.target || event.currentTarget;\n                                setSkills(currentSkills.map((iterSkill, iterSkillKey) => {\n                                    return iterSkillKey === skillKey ? target.value : iterSkill;\n                                }))\n                            }}\n\n                            maxlength=\"40\"\n                        />\n                        <div className={`octo-legs octo-leg${skillKey}`}>\n                            {LEVELS.reduceRight((result, level, levelKey) => {\n                                return result.concat([(\n                                    <>\n                                        <input\n                                            type=\"radio\"\n                                            name={`leg${skillKey}`}\n                                            id={`leg${skillKey}-${levelKey}`}\n                                            value={levelKey}\n                                            checked={currentLevels[skillKey] === levelKey ? 'checked' : ''}\n                                            onChange={() => setLevel(currentLevels.map((iterLevelKey, iterSkillKey) => {\n                                                return iterSkillKey === skillKey ? levelKey : iterLevelKey;\n                                            }))}\n                                        />\n                                        <label htmlFor={`leg${skillKey}-${levelKey}`} title={level}/>\n                                    </>\n                                )])\n                            }, [])}\n                            <div className=\"progessbar\" style={{\n                                background:\n                                    (currentLevels[skillKey] >= LEVELS.length - 3) ?\n                                        `linear-gradient(to right, ${secondaryColor} 0%, ${primaryColor} 85%)` :\n                                        `${primaryColor}`\n                            }} />\n                        </div>\n                    </>\n                ))}\n            </div>\n\n            <div className=\"question\">\n                <h2>Что было важно?</h2>\n                <textarea onChange={event => {\n                    setAnswers({\n                            ...answers,\n                            positive: {\n                                text: event.target.value,\n                            },\n                        });\n                    }}\n                    maxlength=\"1500\"\n                    value={answers.positive.text}\n                />\n            </div>\n\n            <div className=\"question\">\n                <h2>Что можно сделать было лучше?</h2>\n                <textarea onChange={event => {\n                        setAnswers({\n                            ...answers,\n                            negative: {\n                                text: event.target.value,\n                            },\n                        })\n                    }}\n                    maxlength=\"1500\"\n                    value={answers.negative.text}\n                />\n            </div>\n\n            <div className=\"send-form\">\n                <a\n                    className=\"send\"\n                    href={getMailto(responseEmail, name, results)}\n                >\n                    Отправь результат\n                </a>\n                <span className=\"expand\" onClick={() => showResults(true)}>или вручную</span>\n            </div>\n\n            {!!isShowResults && (\n                <div className=\"results\">\n                    <h3>Скопируй и отправь на {responseEmail}</h3>\n                    <textarea readOnly={true} onClick={event => event.target.select()} value={serializeResults(results)} />\n                </div>\n            )}\n        </div>\n    );\n};\n\nfunction getMailto(email, name, results) {\n    return `mailto:${email}?subject=${getResponseSubject(name)}&body=${getResponseBody(results)}`;\n}\n\nfunction getResponseSubject(name) {\n    // encodeURIComponent\n    return (`Performance Review - ${name}`);\n}\n\nfunction getResponseBody(results) {\n    // encodeURIComponent\n    return (serializeResults(results));\n}\n\nfunction serializeResults(results) {\n    return JSON.stringify(results);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nexport default function getUrlParams() {\n    const params = window.location.search.slice(1).split('&');\n\n    return params.reduce((result, param) => {\n        const [key, value] = param.split('=');\n        return Object.assign(result, {\n            [key]: decodeURIComponent(value).replace('+', ' '),\n        });\n    }, {});\n}\nconst params = getUrlParams();\n\nReactDOM.render((\n    <App name={params.name || '?'} period={params.period} responseEmail={params.responseEmail} />\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}